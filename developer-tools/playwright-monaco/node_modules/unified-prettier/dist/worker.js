import { parentPort } from 'node:worker_threads';
import { format, getFileInfo, resolveConfig } from 'prettier';
parentPort.addListener('message', async ({ content, filepath, options, port, signal }) => {
    let response;
    try {
        const fileInfo = await getFileInfo(filepath);
        response = {
            result: fileInfo.ignored || !fileInfo.inferredParser
                ? content
                : await format(content, {
                    ...(await resolveConfig(filepath, { editorconfig: true })),
                    ...options,
                    filepath
                })
        };
    }
    catch (error) {
        response = { error };
    }
    try {
        port.postMessage(response, []);
    }
    finally {
        port.close();
        Atomics.store(signal, 0, 1);
        Atomics.notify(signal, 0);
    }
});
//# sourceMappingURL=worker.js.map